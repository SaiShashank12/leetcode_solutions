class UnionFind: 
    
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [1] * n 
    
    def find(self, p):
        if p != self.parent[p]: 
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]
    
    def union(self, p, q): 
        prt, qrt = self.find(p), self.find(q)
        if prt == qrt: return False 
        if self.rank[prt] > self.rank[qrt]: prt, qrt = qrt, prt
        self.parent[prt] = qrt
        self.rank[qrt] += self.rank[prt]
        return True 
    

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        initial = set(initial)
        for u in range(n): 
            if u not in initial: 
                for v in range(u+1, n): 
                    if graph[u][v] and v not in initial: 
                        uf.union(u, v)
                        
        mp = defaultdict(set)
        for u in initial: 
            for v in range(n): 
                if graph[u][v] and v not in initial: 
                    mp[u].add(uf.find(v))
        freq = sum((Counter(v) for v in mp.values()), Counter())
        
        ans = best = -1
        for u in initial: 
            cnt = 0
            for v in mp[u]: 
                if freq[v] == 1: cnt += uf.rank[v]
            if cnt > best or cnt == best and u < ans: ans, best= u, cnt
        return ans